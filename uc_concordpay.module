<?php

/**
 * @file
 * Processes payments using Concordpay Payment Gateway.
 *
 * Developed by Concordpay - https://pay.concord.ua/.
 */

include_once(dirname(__FILE__) . '/class/concordpay.cls.php');

/**
 * Constant definitions.
 */
define('UC_CONCORDPAY_RETURN_URL', 'ucommerce/concordpay/return');


/**
 * Implements hook_menu()
 */
function uc_concordpay_menu()
{
    $items = array();
    $items[UC_CONCORDPAY_RETURN_URL] = array(
        'title' => 'Callback for ConcordPay Gateway',
        'page callback' => 'uc_concordpay_page_callback',
        'access arguments' => array('access content'),
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'uc_concordpay.pages.inc',

    );

    return $items;
}

/**
 * Webhook listener for response from gateway
 */
//function uc_concordpay_page_callback()
//{
//
//    $data = null;
//    var_dump(file_get_contents("php://input"));
//    var_dump($_POST);
//    if ($data) {
////        $order = uc_order_load()
//
//        $order = null;
//
//        $cp = new Concordpay();
//        list($orderId,) = explode(concordpay::ORDER_SEPARATOR, $data['orderReference']);
//
//        $paymentInfo = $cp->isPaymentValid($data);
//        if ($paymentInfo) {
//            uc_order_update_status($order->order_id, 'completed');
//        }
//
//
//        return http_response_code(200);
//    }
//}

/**
 * Implements hook_uc_payment_method().
 */
function uc_concordpay_uc_payment_method()
{
    $methods['concord_pay'] = array(
        'id' => 'concord pay',
        'name' => t('Concord Pay Gateway'),
        'title' => t('Оплата картами VISA, Mastercard, GooglePay (ConcordPay)'),
        'desc' => t('Оплата картами VISA, Mastercard, GooglePay (ConcordPay)'),
        'callback' => 'uc_concordpay_settings_form',
        'redirect' => 'uc_concordpay_redirect_form',
        'weight' => 1,
        'checkout' => TRUE,
    );

    return $methods;
}

function uc_concordpay_settings_form($op, &$order, $form = NULL, &$form_state = NULL, $settings = NULL)
{

    switch ($op) {

        case 'settings':
            $form['cp_merchant_id'] = array(
                '#type' => 'textfield',
                '#title' => t('Merchant ID'),
                '#default_value' => variable_get('cp_merchant_id', ''),
                '#required' => TRUE
            );

            $form['cp_secret_key'] = array(
                '#type' => 'textfield',
                '#title' => t('Secret key'),
                '#default_value' => variable_get('cp_secret_key', ''),
                '#required' => TRUE
            );

            $form['cp_approve_url'] = array(
                '#type' => 'textfield',
                '#title' => t('Approve Url'),
                '#description' => t('URL to redirect the user if payment is successful'),
                '#default_value' => variable_get('cp_approve_url', ''),
                '#required' => TRUE
            );

            $form['cp_decline_url'] = array(
                '#type' => 'textfield',
                '#title' => t('Decline Url'),
                '#description' => t('URL to redirect the user if payment is unsuccessful'),
                '#default_value' => variable_get('cp_decline_url', ''),
                '#required' => TRUE
            );

            $form['cp_cancel_url'] = array(
                '#type' => 'textfield',
                '#title' => t('Cancel Url'),
                '#description' => t('URL for redirection in case the user refused to make the payment'),
                '#default_value' => variable_get('cp_cancel_url', ''),
                '#required' => TRUE
            );

            return $form;
    }
}

function uc_concordpay_redirect_form($form, &$form_state, $order)
{

    global $base_url;

    $cp = new ConcordPay();
    $order_id = $order->order_id;
    $amount = number_format($order->order_total, 2, '.', '');

    $fields = array(
        'operation' => 'Purchase',
        'merchant_id' => variable_get('cp_merchant_id', ''),
        'order_id' => $order_id . concordpay::ORDER_SEPARATOR . time(),
        'amount' => $amount,
        'currency_iso' => 'UAH',
        'description' => 'Оплата картами VISA, Mastercard, GooglePay (ConcordPay)',
        'callback_url' => $base_url . '/' . UC_CONCORDPAY_RETURN_URL,
        'approve_url' => variable_get('cp_approve_url', ''),
        'decline_url' => variable_get('cp_decline_url', ''),
        'cancel_url' => variable_get('cp_cancel_url', '')
    );

    $fields['signature'] = $cp->getRequestSignature($fields);

    $redirect_form = uc_concordpay_redirect_form_generate($fields, concordpay::URL);
    return $redirect_form;
}


/**
 * Helper function for redirect form build.
 *
 * @param array $data
 *   An array containing the fields for redirect form.
 *
 * @param string $url
 *   Reserved param for future purposes.
 *
 * @return array $form
 *   An array contaaning the form ready to submit.
 */

function uc_concordpay_redirect_form_generate($data, $url = '')
{
    $form['#action'] = concordpay::URL;
    foreach ($data as $k => $v) {
        if (!is_array($v)) {
            $form[$k] = array(
                '#type' => 'hidden',
                '#value' => $v
            );
        } else {
            $i = 0;
            foreach ($v as $sk => $val) {
                $form[$k . '[' . $sk . ']'] = array(
                    '#type' => 'hidden',
                    '#value' => $val
                );
            }
        }
    }

    $form['actions'] = array('#type' => 'actions');

    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Pay via ConcordPay')
    );

    return $form;
}

